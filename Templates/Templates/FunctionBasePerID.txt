using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System.Net.Http;
using Dal.Models;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using @@ProjectName.Classes;
using System.Text;

namespace @@ProjectName.Functions
{
    public class @@TableNameByID
    {
        private readonly @@DBContext _context;
        private @@TableNameGetFunctions supportFunctions;
        public @@TableNameByID(@@DBContext context)
        {
            _context = context;
            supportFunctions = new @@TableNameGetFunctions(_context);

        }
        [FunctionName("@@TableNameByID")]
        [ProducesResponseType(typeof(@@ContextTable), 200)]
        [ProducesResponseType(500)]
        public async Task<HttpResponseMessage> Run(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", "delete", "put", Route = "@@TableName/{Id}")] HttpRequest req,
            ILogger log,string Id)
        {
            {
                StringBuilder _errLog = new StringBuilder();
                 _errLog.Append ( "Function @@TableName V1.3");
				 log.LogInformation(_errLog.ToString());
                try
                {
                    string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
                    return await supportFunctions.FunctionOperation(FillReqObject.Fill(requestBody, req.Method, req?.Query["mode"], Id));
                }

                catch (Exception ex)
                {
                    log.LogInformation(_errLog + ex.Message + ":" + ex.StackTrace);
                    return new HttpResponseMessage
                    {
                        Content = new StringContent(JsonConvert.SerializeObject(_errLog + ex.Message + ":" + ex.StackTrace))
                    };
                }
            }
        }

     
    }
}